name: frontend workflow

on:
  push:
    branches-ignore:
      - "main"
      - "develop"
  pull_request:
    branches:
      - "main"
      - "develop"
    types:
      - closed

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0
      # - name: Cache npm dependencie
      #   id: cache-npm
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-
      # - name: Create yarn directory
        
      #   run: |
      #     if test -d ~/.yarn; then
      #       echo "Directory exists"
      #     else
      #       echo mkdir ~/.yarn
      #     fi
      - name: Cache yarn dependencies
        id: cache-yarn
        uses: actions/cache@v3
        env:
          cache-name: cache-yarn
        with:
          path: ~/.yarn/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-
      - name: Install Dependencies
        if: ${{ steps.cache-yarn.outputs.cache-hit != 'true' }}
        run: |
          yarn install --non-interactive
      - name: Run Prettier
        run: |
          yarn format
      - name: Run Lint
        run: |
          yarn lint

  # build_and_push_to_docker_hub:
  #   name: Push image to DockerHub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   if: github.event.pull_request.merged == true && github.base_ref == 'main'
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v2

  #     - name: Set up docker buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to Docker
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD  }}

  #     - name: Push to DockerHub
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: "{{defaultContext}}:backend"
  #         push: True
  #         tags: ${{ secrets.DOCKER_USERNAME }}/friends-locator-backend:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if: github.event.pull_request.merged == true && github.base_ref == 'main'
  #   steps:
  #     - name: Executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         script: |
  #           sudo docker pull ${{ secrets.DOCKER_USERNAME }}/friends-locator-backend:latest
  #           cd ../home/
  #           sudo docker compose stop
  #           sudo docker compose rm -f backend
  #           sudo docker image prune -f
  #           touch .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           sudo docker compose up -d

  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.event.pull_request.merged == true && github.base_ref == 'main'
  #   steps:
  #     - name: Sending message
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: |
  #           ${{ github.workflow }}
  #           ${{ github.actor }} created commit:
  #                       Commit message: ${{ github.event.commits[0].message }}

  #                       Repository: ${{ github.repository }}

  #                       See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
